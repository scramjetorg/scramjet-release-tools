#!/usr/bin/env node

const semver = require('semver');
const {StringStream} = require('scramjet');
const {logger, streamFile, packageFile, runStream} = require('../lib');

(async () => {
    logger.info("Reading package and current changelog");

    const pkg = (await packageFile());
    const niceName = pkg.niceName || pkg.name.replace(/(^|-)(\w)/g, (d, s, x) => (s ? ' ' : '') + x.toUpperCase());

    let i = 0;
    const changelogs = (await
        streamFile('CHANGELOG.md')
            .lines(/\s*\r?\n/)
            .parse(x => ([
                x,
                i++
            ]))
            .filter(([x]) => x.match(/^#/))
            .map(([x, i]) => {
                const z = x.match(/(\d+\.\d+(?:\.\d+)?)( - .*)?$/);
                if (!z) return false;
                return [z[1], x, i];
            })
            .filter(x => x)
            .toArray()
    ).sort(([a],[b]) => a === b ? 0 : semver.gt(a,b) ? -1 : 1);

    const loglatest = changelogs[0];

    logger.info(`Found ${changelogs.length} versions, newest is: ${loglatest[0]} in line ${loglatest[2]} `);

    const gitData = await (runStream('git log --no-merges --format="%h %d %s"')
        .lines(/\r?\n/)
        .parse(
            (line) => {
                const [, sha, branch, message] = line.match(/^([\w\d]+)\s+(?:\(([^)]+)\))?\s+(.*)/) || [];
                const tagString = branch && branch.split(/\s*,\s*/).find(x => x.startsWith("tag: v"));
                const version = tagString && tagString.substr(6);

                return {line, sha, version, message};
            }
        )
        .while(({version}) => !version || semver.gt(version, loglatest[0]))
        .toStringStream(async ({sha, version, message}) => {
            if (version) {
                return `+\n+## ${niceName} ${version}${message !== version ? ' - ' + message : ''}\n+\n`;
            } else {
                return `+* ${sha} - ${message}\n`;
            }
        }, new StringStream)
        .toArray());

    gitData.push('+\n');
    gitData.push(' ' + loglatest[1] + '\n');

    const newlines = gitData.join('').split("\n").length;
    gitData.unshift(`--- a/CHANGELOG.md\n+++ b/CHANGELOG.md\n@@ -${loglatest[2]},1 +${loglatest[2]},${newlines - 1} @@\n`);

    await (
        runStream('patch -t CHANGELOG.md', {}, StringStream.fromArray(gitData).stringify(x => x))
            .toArray()
    );

    logger.info(`Changelog patched!`);

})();
