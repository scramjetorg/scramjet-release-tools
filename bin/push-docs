#!/usr/bin/env node

const { logger, run, scmClean, runRoot, failIf } = require('../lib');

module.exports = (async ({ n: noPush, x: noTest }) => {
    const wasClean = await scmClean();

    logger.info("Pulling latest changes from repo");

    noPush || await run('git pull --ff-only');

    logger.info("Checking branch correctness");
    const {stdout: branchData} = await run('git branch -v');
    const currentBranch = branchData.split('\n').find(b => b.startsWith('*'));

    failIf(currentBranch.substr(2,3) !== 'dev', "Release is done only from development branch.");
    failIf(branchData.match(/\[(ahead|behind) \d\]/), "There are branches not in sync with upstream.");

    if (!(await scmClean())) {
        if (!noTest) {
            try {
                logger.info("Test before comitting...");
                await run('npm test');
            } catch (e) {
                e.message = `Test failed on audit: ${e.message}`;
                throw e;
            }
        } else {
            logger.warn("No test done");
        }
    }

    if (!wasClean || noPush)
        throw new Error('Working copy wasn\'t clean, so not releasing version');

    logger.warn("Committing changes and pushing...");

    if (await scmClean()) {
        throw new Error('Changes made but working copy not affected.');
    }

    await run('git merge master');
    await run('git commit -am "Documentation update."');
    await run('git checkout master');
    await run('git merge -');
    await run('git push');
    await run('git checkout -');

});

runRoot(module.exports, require('minimist')(process.argv.slice(2)));

